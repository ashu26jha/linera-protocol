window.SIDEBAR_ITEMS = {"constant":[["LOAD_VIEW_COUNTER","The metric counting how often a view is read from storage."],["SAVE_VIEW_COUNTER","The metric counting how often a view is written from storage."]],"fn":[["increment_counter","Increments the metrics counter with the given name, with the struct and base key as labels."]],"mod":[["batch","The definition of the batches for writing in the datatbase. A set of functionalities for building batches to be written into the database. A batch can contain three kinds of operations on a key/value store:"],["collection_view","The `CollectionView` implements a map structure whose keys are ordered and the values are views."],["common","The definitions used for the memory/rocksdb/dynamo_db. This provides several functionalities for the handling of data. The most important traits are:"],["dynamo_db","Helper definitions for DynamoDB storage."],["hashable_wrapper","Wrapping a view to compute a hash."],["key_value_store_view","The implementation of a key value store view."],["localstack","Helper types for interfacing with a LocalStack instance."],["log_view","The `LogView` implements a log list that can be pushed."],["lru_caching","The LRU (least recently used) caching."],["map_view","The `MapView` implements a map with ordered keys. The `MapView` allows to implement a map that can be modified."],["memory","Helper definitions for in-memory storage."],["queue_view","The `QueueView` implements a queue that can pushed_backed and deleted on the front."],["reentrant_collection_view","The `ReentrantCollectionView` implements a map structure whose keys are ordered and the values are views with concurrent access."],["register_view","The `RegisterView` allows to implement a register for a single value."],["rocksdb","Helper definitions for Rocksdb storage."],["set_view","The `SetView` implements a set with ordered entries."],["test_utils","Helper types for tests."],["views","The definition of the `View` and related traits."]]};